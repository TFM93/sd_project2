package pt.ua.sd.RopeGame.shared_mem.RepoSide;import pt.ua.sd.RopeGame.comInfo.*;public class RepoInterface {    /**     * central repository     * @serialField repo     */    private final MGeneralInfoRepo repo;    /**     * Number of terminated messages received     * @serialField nTerminateMessages     */    private int nTerminateMessages;    /**     * Number of terminated messages to end     * @serialField nTerminateMessagesToEnd     */    private final int nTerminateMessagesToEnd;    /**     * Instantiation of central repository site interface     * @param repo central repo     * @param nTerminateMessagesToEnd number of terminate messages to end     */    public RepoInterface(MGeneralInfoRepo repo, int nTerminateMessagesToEnd) {        this.repo = repo;        this.nTerminateMessages = 0;        this.nTerminateMessagesToEnd = nTerminateMessagesToEnd;    }    /**     * Processing of messages executing its task and generating an answer message.     * @param inMessage message with the request     * @return answer message     * @throws MessageExcept if the message with the request is considered invalid     */    public Message processAndReply (Message inMessage) throws MessageExcept {        Message outMessage = null;        /*  only the Referee is able to call methods from the referee site  */        if (inMessage instanceof CoachRepoMessage) {            System.out.println("instance of CoachRepoMessage received");            outMessage = processAndReplyCoachMessage((CoachRepoMessage) inMessage);        }        else if(inMessage instanceof ContestantRepoMessage){            System.out.println("instance of ContestantRepoMessage received");            outMessage = processAndReplyContestantMessage((ContestantRepoMessage) inMessage) ;        }        else if(inMessage instanceof RefereeRepoMessage){            System.out.println("instance of RefereeRepoMessage received");            outMessage = processAndReplyRefereeMessage((RefereeRepoMessage) inMessage);        }        else {            throw new MessageExcept ("Invalid message instance.", inMessage);        }        return outMessage;    }    private Message processAndReplyCoachMessage(CoachRepoMessage inMessage) throws MessageExcept {        CoachRepoMessage outMessage = null;        // Validate received message        switch (inMessage.getMsgType()) {            case CoachRepoMessage.COACHLOG:                if(inMessage.getArg1()<0||inMessage.getArg1()>2)                    throw new MessageExcept("invalid team id",inMessage);                break;            default:                throw new MessageExcept ("Invalid type!", inMessage);        }        // Processing        switch (inMessage.getMsgType()) {            case CoachRepoMessage.COACHLOG:               repo.coachLog(inMessage.getArg1(),inMessage.getArg2());                outMessage = new CoachRepoMessage(CoachRepoMessage.ACK);                break;            case CoachRepoMessage.TERMINATE:                nTerminateMessages++;                if (nTerminateMessages == nTerminateMessagesToEnd) {                    System.out.println("Coach central repo terminated!");                    System.exit(0);                }                break;        }        return outMessage;    }    private Message processAndReplyContestantMessage(ContestantRepoMessage inMessage) throws MessageExcept {        ContestantRepoMessage outMessage = null;        // Validate received message        switch (inMessage.getMsgType()) {            case ContestantRepoMessage.CONTESTANTLOG:                if(inMessage.getArg1()<0)                    throw new MessageExcept("invalid id",inMessage);                if(inMessage.getArg3()<0)                    throw new MessageExcept("invalid strength",inMessage);                if(inMessage.getArg2()<0 || inMessage.getArg3()>2)                    throw new MessageExcept("invalid team id",inMessage);                //TODO-check contestant states                break;            case ContestantRepoMessage.UPDATEROPECENTER:                break;            default:                throw new MessageExcept ("Invalid type!", inMessage);        }        // Processing        switch (inMessage.getMsgType()) {            case ContestantRepoMessage.CONTESTANTLOG:                repo.contestantLog(inMessage.getArg1(),inMessage.getArg2(),inMessage.getArg3(),inMessage.getArg4());                outMessage = new ContestantRepoMessage(ContestantRepoMessage.ACK);                break;            case ContestantRepoMessage.UPDATEROPECENTER:                repo.updtRopeCenter(inMessage.getArg1());                outMessage = new ContestantRepoMessage(ContestantRepoMessage.ACK);                break;            case ContestantRepoMessage.TERMINATE:                nTerminateMessages++;                if (nTerminateMessages == nTerminateMessagesToEnd) {                    System.out.println("Contestant central repo terminated!");                    System.exit(0);                }                break;        }        return outMessage;    }    /**     * Processing of messages from the referee executing its task and generating an answer message.     * @param inMessage message with the request     * @return answer message     * @throws MessageExcept if the message with the request is considered invalid     */    private Message processAndReplyRefereeMessage(RefereeRepoMessage inMessage) throws MessageExcept {        RefereeRepoMessage outMessage = null;        // Validate received message        switch (inMessage.getMsgType()) {            case RefereeRepoMessage.PRINTMATCHRESULT:                if(inMessage.getScore1()<0)                    throw new MessageExcept("invalid score for team 1",inMessage);                if(inMessage.getScore2()<0)                    throw new MessageExcept("invalid score for team 2",inMessage);                if(inMessage.getWinner()<0 || inMessage.getWinner()>2)                    throw new MessageExcept("invalid team winner",inMessage);                break;            case RefereeRepoMessage.REFEREELOG:                if(inMessage.getArg1() < 0){                    throw new MessageExcept("invalid current trial number",inMessage);                }                //TODO-check enum type                break;            case RefereeRepoMessage.UPDATEGAMENR:                break;            case RefereeRepoMessage.UPDATEROPECENTER:                break;            default:                throw new MessageExcept ("Invalid type!", inMessage);        }        // Processing        switch (inMessage.getMsgType()) {            case RefereeRepoMessage.PRINTMATCHRESULT:                repo.printMatchResult(inMessage.getWinner(),inMessage.getScore1(),inMessage.getScore2());                outMessage = new RefereeRepoMessage(RefereeRepoMessage.ACK);                break;            case RefereeRepoMessage.REFEREELOG:                repo.refereeLog(inMessage.getArg2(),inMessage.getArg1());                outMessage = new RefereeRepoMessage(RefereeRepoMessage.ACK);                break;            case RefereeRepoMessage.UPDATEGAMENR:                repo.updGame_nr();                outMessage = new RefereeRepoMessage(RefereeRepoMessage.ACK);                break;            case RefereeRepoMessage.UPDATEROPECENTER:                repo.updtRopeCenter(inMessage.getArg1());                break;            case RefereeRepoMessage.TERMINATE:                nTerminateMessages++;                if (nTerminateMessages == nTerminateMessagesToEnd) {                    System.out.println("Referee central repo terminated!");                    System.exit(0);                }                break;        }        return outMessage;    }}